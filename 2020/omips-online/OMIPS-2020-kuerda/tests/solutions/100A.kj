class program {
  /* Idea de la solución:
 * Dado que N representa la cantidad de jugadores en el
 * equipo más grande, verificamos si los primeros N jugadores
 * siguen una misma formacion (ya sea ascendente o descendente).
 * 
 * Si la siguen, entonces el equipo más grande es el de la
 * izquierda, si no, entonces es el de la derecha. 
 * 
 * Sabiendo cual es el equipo más grande, solo se suman las fuerzas
 * de cada equipo y se comparan.
 */

  define contar1(n) {
    if (frontIsBlocked)
      comparar(n);
    else if (nextToABeeper) {
      pickbeeper();
      move();
      contar1(succ(n));
    } else {
      move();
      contar0(0);
    }
  }

  define contar0(n) {
    if (frontIsBlocked)
      comparar(n);
    else if (nextToABeeper) {
      pickbeeper();
      move();
      contar1(0);
    } else {
      move();
      contar0(succ(n));
    }
  }

  define contarComparar(n) {
    if (nextToABeeper) {
      pickbeeper();
      contarComparar(succ(n));
    } else {
      iterate (n) putbeeper();
      move();
      comparar(n);
    }
  }

  define comparar(n) {
    if (!iszero(n) && nextToABeeper) {
      pickbeeper();
      comparar(pred(n));
      putbeeper();
    } else if (iszero(n) && nextToABeeper) {
      // Número de la izquierda es más chico
      while (notFacingNorth) turnleft();
    } else if (!iszero(n) && notNextToABeeper) {
      // Número de la derecha es más chico
      return();
    } else {
      // Iguales
      while (notFacingSouth) turnleft();
    }
  }

  define turn(n) {
    iterate (n) turnleft();
  }

  define contar(n) {
    if (nextToABeeper) {
      pickbeeper();
      contar(succ(n));
    } else {
      iterate (pred(n)) putbeeper();
      turn(2);
      move();
      turn(1);
      programN(n);
    }
  }

  define programN(n) {
    /* Función que ubica a Karel en el último jugador del
     * equipo izquierdo.
     */
    iterate (pred(n)) {
      contarComparar(0);
      if (facingNorth) {
        move();
        putbeeper();
        turn(2);
        move();
        turn(1);
      } else if (facingSouth) {
        // Caso especial: números repetidos
        turn(3);
        move();
        return();
      }
    }
    turn(1);
    move();
    turn(1);
    if (nextToABeeper)
      contar1(0);
    else
      contar0(0);
    if (facingSouth) {
      // El equipo de la izquierda es más grande
      move();
      turn(1);
      iterate (pred(n)) move();
      turn(2);
    } else {
      // El equipo de la derecha es más grande
      while (notFacingSouth) turnleft();
      move();
      turn(1);
      while (nextToABeeper && frontIsClear) move();
      turn(2);
      if (notNextToABeeper) move();
      iterate (n) move();
    }
  }

  define sumaFuerzas(n) {
    if (notNextToABeeper) {
      // Caso base de la recursión
      if (facingWest) {
        // Fuerza del equipo de la izquierda
        iterate (n) putbeeper();
      } else {
        // Fuerza del equipo de la derecha
        turn(2);
        while (frontIsClear) move();

        // Comparamos las fuerzas
        comparar(n);
        if (facingSouth) {
          // Empate
          turn(2);
        } else if (facingNorth) {
          // Equipo izquierdo suma más fuerza
          turn(1);
        } else {
          // Equipo derecho suma más fuerza
          turn(2);
        }
      }
    } else if (nextToABeeper) {
      pickbeeper();
      if (nextToABeeper)
        sumaFuerzas(succ(n));
      else {
        if (frontIsClear) move();
        sumaFuerzas(succ(n));
      }
    }
  }

  program() {
    while (notFacingNorth) turnleft();
    move();
    contar(0);
    // Sumar fuerzas del equipo de la izquierda
    sumaFuerzas(0);

    turn(2);
    move();
    while (notNextToABeeper) move();

    // Sumar fuerzas del equipo de la derecha
    sumaFuerzas(0);
    turnoff();
  }
}
